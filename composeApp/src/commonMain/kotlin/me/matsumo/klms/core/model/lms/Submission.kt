package me.matsumo.klms.core.model.lms

import kotlinx.datetime.Instant
import kotlinx.serialization.Serializable
import me.matsumo.klms.core.model.lms.entity.SubmissionEntity

@Serializable
data class Submission(
    val assignmentId: Int,
    val assignment: Assignment?,
    val course: Course?,
    val attempt: Int,
    val body: String?,
    val grade: String?,
    val gradeMatchesCurrentSubmission: Boolean,
    val htmlUrl: String,
    val previewUrl: String,
    val score: Double?,
    val submissionComments: List<SubmissionComment>,
    val submissionType: String,
    val submittedAt: Instant,
    val url: String?,
    val userId: Int,
    val graderId: Int,
    val gradedAt: Instant?,
    val user: LmsUser?,
    val late: Boolean,
    val assignmentVisible: Boolean,
    val excused: Boolean,
    val missing: Boolean,
    val latePolicyStatus: String?,
    val pointsDeducted: Double?,
    val secondsLate: Int?,
    val workflowState: String,
    val extraAttempts: Int,
    val anonymousId: String?,
    val postedAt: Instant?,
    val readStatus: String?,
    val redoRequest: Boolean,
)

fun SubmissionEntity.translate(): Submission {
    return Submission(
        assignmentId = assignmentId,
        assignment = assignment?.translate(),
        course = course?.translate(),
        attempt = attempt,
        body = body,
        grade = grade,
        gradeMatchesCurrentSubmission = gradeMatchesCurrentSubmission,
        htmlUrl = htmlUrl,
        previewUrl = previewUrl,
        score = score,
        submissionComments = submissionComments?.map { it.translate() } ?: emptyList(),
        submissionType = submissionType,
        submittedAt = Instant.parse(submittedAt),
        url = url,
        userId = userId,
        graderId = graderId,
        gradedAt = gradedAt?.let { Instant.parse(it) },
        user = user?.translate(),
        late = late,
        assignmentVisible = assignmentVisible,
        excused = excused,
        missing = missing,
        latePolicyStatus = latePolicyStatus,
        pointsDeducted = pointsDeducted,
        secondsLate = secondsLate,
        workflowState = workflowState,
        extraAttempts = extraAttempts,
        anonymousId = anonymousId,
        postedAt = postedAt?.let { Instant.parse(it) },
        readStatus = readStatus,
        redoRequest = redoRequest,
    )
}
